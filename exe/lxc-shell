#!/usr/bin/env ruby

require 'yaml'
require 'pp'

def symbolize_keys(hash)
  {}.tap do |retval|
    hash.each do |k, v|
      retval[k.to_sym] = v.is_a?(Hash) ? symbolize_keys(v) : v
    end
  end
end

state = symbolize_keys(YAML.load_file(ARGV[0]))

require 'kitchen'
require 'kitchen/driver/lxd/host_locator'
require 'tty/reader'

class NxHost
  include Kitchen::Driver::Lxd::HostLocator
  def initialize(config = {})
    @config = config
  end
  attr_reader :config
end

driver = NxHost.new state[:reference]
transport = driver.nx_transport state
tty = TTY::Reader.new
win_keymap = Gem.win_platform? ? TTY::Reader::Keys.keys.invert : {}

# TODO: load the shell command from /etc/passwd for the current user (root prior to implementing runas)
# TODO: (someday - if found useful) the TTY subsystem doesn't capture stdin, so you can't pipe commands to this script
#   we'd have to interweave the code for both input types (ignoring tty if stdin is not a tty)
#   tty must stay due to it handling windows input for us
transport.execute 'bash -i', capture: :interactive do |active|
  active.capture_output do |stdout|
    print stdout
  end
  tty.on :keypress do |event|
    active.stdin.write win_keymap[event.key.name] || event.value
  end
  # tty-reader doesn't have its own thread - it's pumped by a 'read_xxxx' call
  loop do
    # TODO: now need we just need some graceful timeout/connection-check/teardown logic
    tty.read_keypress
  end
end
