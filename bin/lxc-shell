#!/usr/bin/env ruby

require 'yaml'

def symbolize_keys(hash)
  {}.tap do |retval|
    hash.each do |k, v|
      retval[k.to_sym] = v.is_a?(Hash) ? symbolize_keys(v) : v
    end
  end
end

state = symbolize_keys(YAML.load(File.read(ARGV[0])))

require 'kitchen'
require 'kitchen/driver/lxd/host_locator'
require 'tty/reader'
require 'tty/screen'

class NxHost
  include Kitchen::Driver::Lxd::HostLocator
  def initialize(config = {})
    @config = config
  end
  attr_reader :config
end

driver = NxHost.new state[:config]
transport = driver.nx_transport state
tty = TTY::Reader.new
win_keymap = {}
if Gem.win_platform?
  win_keymap = TTY::Reader::Keys.keys.invert
  win_keymap[:clear] = win_keymap[:delete]
end

# ruby bin/lxc-shell .kitchen/kitchen-lxd-cloud-ubuntu-1604.yml

# TODO: (someday - if found useful) the TTY subsystem doesn't capture stdin, so you can't pipe commands to this script
#   we'd have to interleave the code for both input types (ignoring tty if stdin is not a tty)
#   TTY gems must stay due to them handling windows input for us
term = ENV['TERM'] || 'dumb'
user = transport.username
if user
  user = " - #{user}"
  transport.reset_user
end
transport.execute "env TERM=#{term} su#{user}", capture: :interactive do |active|
  active.capture_output do |stdout|
    print stdout
  end
  tty.on :keypress do |event|
    active.stdin.write win_keymap[event.key.name] || event.value
  end
  if active.thread.respond_to? :window_resize
    lines, columns = TTY::Screen.size
    active.thread.window_resize columns, lines
  end
  # tty-reader doesn't have its own thread - it's pumped by a 'read_xxxx' call
  #   and its inner wait loop blocks VERY HARD unless you nonblock (even a main Thread.kill won't unblock it - windows issue?)
  #     yes windows issue...  test code can kill read_keypress when running on linux
  begin
    loop do
      break unless active.thread.alive?
      sleep 0.01 unless tty.read_keypress nonblock: true
    end
  rescue Interrupt
    # active.thread.signal 2
    active.stdin.write "\x3"
    retry
  end
end.error!
